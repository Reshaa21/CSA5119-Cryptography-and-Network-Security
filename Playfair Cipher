def prepare_key_matrix(key):
    matrix = []
    used = set()
    key = key.upper().replace("J", "I")
    for ch in key:
        if ch.isalpha() and ch not in used:
            matrix.append(ch)
            used.add(ch)
    for ch in "ABCDEFGHIKLMNOPQRSTUVWXYZ":
        if ch not in used:
            matrix.append(ch)
            used.add(ch)
    return [matrix[i:i+5] for i in range(0, 25, 5)]

def find_position(matrix, ch):
    for row in range(5):
        for col in range(5):
            if matrix[row][col] == ch:
                return row, col
    return None, None

def playfair_encrypt(plain, key):
    matrix = prepare_key_matrix(key)
    plain = plain.upper().replace("J", "I").replace(" ", "")
    i = 0
    result = ""
    while i < len(plain):
        a = plain[i]
        b = plain[i+1] if i+1 < len(plain) else 'X'
        if a == b:
            b = 'X'
            i += 1
        else:
            i += 2

        row1, col1 = find_position(matrix, a)
        row2, col2 = find_position(matrix, b)
        if row1 == row2:
            result += matrix[row1][(col1+1)%5] + matrix[row2][(col2+1)%5]
        elif col1 == col2:
            result += matrix[(row1+1)%5][col1] + matrix[(row2+1)%5][col2]
        else:
            result += matrix[row1][col2] + matrix[row2][col1]
    return result

# Example
print("Encrypted:", playfair_encrypt("HELLO", "MONARCHY"))
