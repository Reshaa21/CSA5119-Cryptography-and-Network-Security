def mod26(x):
    return x % 26

def matrix_mult(a, b):
    return [
        mod26(a[0]*b[0] + a[1]*b[2]),
        mod26(a[0]*b[1] + a[1]*b[3]),
        mod26(a[2]*b[0] + a[3]*b[2]),
        mod26(a[2]*b[1] + a[3]*b[3])
    ]

def mod_inv_matrix(matrix):
    a, b, c, d = matrix
    det = mod26(a * d - b * c)
    for i in range(1, 26):
        if (det * i) % 26 == 1:
            det_inv = i
            break
    return [
        mod26(det_inv * d), mod26(-det_inv * b),
        mod26(-det_inv * c), mod26(det_inv * a)
    ]

def text_to_num_pairs(text):
    text = text.upper().replace(" ", "")
    if len(text) % 2 != 0:
        text += 'X'
    return [(ord(text[i]) - 65, ord(text[i+1]) - 65) for i in range(0, len(text), 2)]

def encrypt_hill(plain, key_matrix):
    pairs = text_to_num_pairs(plain)
    result = ''
    for p1, p2 in pairs:
        c1 = mod26(key_matrix[0] * p1 + key_matrix[1] * p2)
        c2 = mod26(key_matrix[2] * p1 + key_matrix[3] * p2)
        result += chr(c1 + 65) + chr(c2 + 65)
    return result

def decrypt_hill(cipher, key_matrix):
    inv_key = mod_inv_matrix(key_matrix)
    return encrypt_hill(cipher, inv_key)

plain = "MEET"
key_matrix = [9, 4, 5, 7]
cipher = encrypt_hill(plain, key_matrix)
print("Encrypted:", cipher)
print("Decrypted:", decrypt_hill(cipher, key_matrix))
